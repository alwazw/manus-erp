version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-8000}:8000" # Use APP_PORT from .env, default to 8000
    volumes:
      - ./src:/usr/src/app/src # Mount the src directory for development
    depends_on:
      - db
      - redis
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend/erp_frontend_app
      dockerfile: Dockerfile
    ports:
      - "3002:3000" # Host port 3002, container port 3000
    volumes:
      # Mount the source code for the build process to pick up changes
      - ./frontend/erp_frontend_app:/app
      # Use anonymous volumes to ensure container's node_modules and .next are not overwritten by host
      - /app/node_modules
      - /app/.next
    environment:
      # This ensures the frontend knows how to reach the backend API
      # The backend 'app' service is available at http://app:<port> within the Docker network
      # We assume API routes are prefixed with /api on the backend
      - NEXT_PUBLIC_API_URL=http://app:${APP_PORT:-8000}/api
    depends_on:
      - app # Ensures backend 'app' service starts before frontend
    restart: unless-stopped

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db

  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - .env
    depends_on:
      - db

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    ports:
      - "3001:3000"
    volumes:
      - ./homepage_config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:

